close all;
clear all;
clc;
 
%% Parameter
m = 4;
data_size = 10000;
 
%% Simulation Parameters
ml = 1;         % Modulation Level : BPSK
M = 2^ml;
EbNo = 0:1:12;
 
for j = 1:length(EbNo)          % ebn0 loop
    
    tic
    nloop = 100;       % # of simulation loop
    noe_bpsk = 0;       % # of awgn error
    noe_bpsk_hamm = 0;
    nod = 0;            % # of data
        
    SNR = 10^(EbNo(j)/10);
    sgma = 1/sqrt(2*SNR);
    
    for i = 1:nloop
        % Generate prbs data and encode the data using Hamming code
        % general algorithm
        [data, data_hamm] = encodeData(m, data_size);
        
        % BPSK MOD/DEMOD ( AWGN Channel )
        rdata_bpsk = bpsk_mod_demod(data, sgma);
        rdata_bpsk_hamm = bpsk_mod_demod(data_hamm, sgma);
        
        
        % Hamming Code error correction and decode
        rdata_bpsk_hamm_deocded = cordecData(m, rdata_bpsk_hamm);
        
        % Error calculation
        [err_bpsk(j,i), ber_bpsk] = biterr(rdata_bpsk, data);
        [err_bpsk_hamm(j,i), ber_bpsk_hamm] = biterr(rdata_bpsk_hamm_deocded, data);
        
        % Calculating BER
        noe_bpsk = noe_bpsk + err_bpsk(j,i);
        noe_bpsk_hamm = noe_bpsk_hamm + err_bpsk_hamm(j,i);
        nod = nod + length(data);
    end
    
    % Calculating probability of error
    pb_bpsk(j) = noe_bpsk/nod;
    pb_bpsk_hamm(j) = noe_bpsk_hamm/nod;
    theory_bpsk(j) = (1/2)*erfc(sqrt(SNR));
    toc
    
end
 
%% Plot graph
 
figure(1)
semilogy(EbNo, theory_bpsk, 'k-o', EbNo, pb_bpsk, 'b-o', EbNo, pb_bpsk_hamm, 'r-o')
grid on
xlabel('Eb/N0, dB')
ylabel('Probability of error')
legend('BPSK BER')
title('Comparison of BER when using Hamming Code[15,11] in BPSK')
axis([0 12 0.000000001 1])
legend('BPSK Theory', 'BPSK Simulation', 'Hamming Code BPSK Simulation')
